FILE *fopen(const char *path, const char *mode);
成功返回打开的文件流标识符，失败返回NULL

int fclose(FILE *fp);
成功返回0，失败返回EOF

char *fgets(char *s, int size, FILE *stream);
最多读取n-1个字符，并且总是以\0结尾

int fputs(const char *s, FILE *stream);
将指定的字符串输出到流stream中，并且不输出最后的\0

size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
按一块指定大小的存储块读取，指定读取的内存块的数量，返回读取块的数量

size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);
按一块指定大小的存储块输出，指定输出的内存块的数量，返回读取块的数量

long ftell(FILE *stream);
取得当前的文件位置，返回当前位置指示

int fseek(FILE *stream, long offset, int whence);
设定stream流的位置，成功返回0

void rewind(FILE *stream);
设定stream流的位置为开始
















int open(const char *pathname, int flags, mode_t mode);
成功返回文件描述符，失败返回-1

int close(int fd);
成功返回0，失败返回-1

ssize_t read(int fd, void *buf, size_t count);
从fd指示的文件中读取指定数目字节数据到buf所指向的缓冲区，返回读取的实际字节数

ssize_t write(int fd, const void *buf, size_t count);
向fd所指的文件中写入指定字节数目的数据，返回实际写入的字节数

off_t lseek(int fd, off_t offset, int whence);
定位一个已打开的文件，成功返回当前的实际位置

int lstat(const char *path, struct stat *buf);
获得指定文件的属性，存放到buf所指的缓冲区中














pid_t fork(void);
创建一个子进程，一次创建，两次返回，返回0表示子进程，返回大于0表示父进程，返回-1表示出错

int execl(const char *path, const char *arg, ...);
int execlp(const char *file, const char *arg, ...);
int execle(const char *path, const char *arg,..., char * const envp[]);

int execv(const char *path, char *const argv[]);
int execvp(const char *file, char *const argv[]);
int execvpe(const char *file, char *const argv[], char *const envp[]);
exec函数族执行新的程序，arg参数中arg[0]表示新执行程序的名称，arg参数，argv[]和envp[]均以NULL字符结尾，失败返回-1，成功无返回值

void exit(int status);
库函数调用，会执行缓冲区清理，无返回值，status表示退出状态，传递给调用函数

void _exit(int status);
系统调用，直接退出，不清理缓冲区

pid_t wait(int *status);
阻塞等待子进程退出，status为出参，保存子进程的退出状态，成功返回子进程PID，失败返回0

int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
wait进化版， waitpid(-1, &status, 0);等同于wait

pid_t setsid(void);
创建新的会话，并使调用进程成为会话组长进程，新的会话无控制终端，会话ID为调用进程ID，成功返回调用进程ID，失败返回(pid_t)-1












int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
thread表示创建的线程，attr指定线程属性，NULL表示缺省，routine为线程的执行函数，arg为执行函数的调用参数

int pthread_join(pthread_t thread, void **retval);
等待线程结束，retval为出参，指向线程的返回参数

void pthread_exit(void *retval);
线程退出函数，retval为入参，返回线程的退出状态




线程同步
int sem_init(sem_t *sem, int pshared, unsigned int value);
初始化信号量，sem为要初始化的信号量，pshared为信号量的共享范围(0线程间使用,非0进程间使用)，value为信号量的初始值

int sem_wait(sem_t *sem);
对信号量进行P操作，调用进程阻塞等待信号量资源可用，成功0，失败-1

int sem_post(sem_t *sem);
对信号量进行V操作，成功0，失败-1



线程互斥
int pthread_mutex_init(pthread_mutex_t *mutex, pthread_mutexattr_t *attr);
初始化线程互斥锁，mutex需要操作的互斥锁，atrr互斥锁属性，NULL表示缺省属性

int pthread_mutex_lock(pthread_mutex_t *mutex);
申请互斥锁

int pthread_mutex_lock(pthread_mutex_t *mutex);
释放互斥锁











int pipe(int pipefd[2]);
创建无名管道，打开两个文件描述，pipefd为包含两个元素的整型数组，pipefd[0]为读端,pipefd[1]为写端，成功返回0，失败返回-1

int mkfifo(const char *pathname, mode_t mode);
创建有名管道，pathname指定要创建的管道，mode指定管道的访问权限，成功0，失败-1

typedef void (*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);
部署信号的处理函数，signum为指定的信号，handler为信号的处理函数

int kill(pid_t pid, int sig);
发送信号给指定的进程或进程组，sig为要发送的信号，pid>0为要接收信号的进程,pid=0发给和调用进程同组的所有进程，pid=-1发给除了init之外的所有进程

int raise(int sig);
给自己发信号，相当于kill(getpid(),sig);

unsigned int alarm(unsigned int seconds);
设置闹钟，到指定时间后发送SIGALRM信号，成功返回上次设置的闹钟的剩余时间，失败返回-1

int pause(void);
使调用进程停止，直到有任意信号到来





key_t ftok(const char *pathname, int proj_id);
生成一个key，供共享内存，消息队列，信号灯集使用, pathname为文件系统中的一个已存在的文件名，proj_id为子序号，两者组合生成一个唯一的key值，失败返回-1

int shmget(key_t key, size_t size, int shmflg);
获得一段物理共享内存，key值为ftok返回值，或IPC_PRIVATE，size为共享内存大小，shmflg为生成的共享内存的权限位，同open函数权限位，成功返回内存段标识符shmid，失败返回-1

void *shmat(int shmid, const void *shmaddr, int shmflg);
映射物理共享内存到进程的虚拟地址空间，shmid为共享内存的标识符，shmaddr为将共享内存映射到的地址，NULL表示由系统自动分配，shmflg为标志位，SHM_RDONLY共享内存只读，默认0共享内存可读可写，成功返回映射后的地址，失败返回-1

int shmdt(const void *shmaddr);
取消共享内存和虚拟地址之间的映射关系，shmaddr为shmat成功映射的返回值

int shmctl(int shmid, int cmd, struct shmid_ds *buf);
对共享内存进行操作，shmid为共享内存的标识符，cmd为为操作类型，IPC_STAT获取对象属性,IPC_SET设置对象属性,IPC_RMID删除共享内存，buf用在IPC_STAT和IPC_SET时保存和设置对象属性,只读cmd为IPC_RMID时，buf可设为NULL



int semget(key_t key, int nsems, int semflg);
创建一个信号灯集，key值为ftok调用的返回值，nsems为信号灯集中包含的信号灯的数目，semflg为信号灯的访问权限，通常为IPC_CREAT|0666，成功返回信号灯集标识符semid

int semctl(int semid, int semnum, int cmd, /*union semum arg*/);
对信号灯集进行控制，semid为信号灯集标识符，semnum为要修改的信号灯的编号,cmd为对信号灯集的控制命令，GETVAL获取信号等的值，SETVAL设置信号灯的值，IPC_RMID从系统中删除信号灯集合，当cmd为GETVAL或SETVAL时，arg存放信号灯的参数，一般只设置val值，设置信号量的初始化值，当cmd为IPC_RMID时，arg为NULL
union semun {
	int              val;    /* Value for SETVAL */
	struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
	unsigned short  *array;  /* Array for GETALL, SETALL */
	struct seminfo  *__buf;  /* Buffer for IPC_INFO
								(Linux-specific) */
};

int semop(int semid, struct sembuf *sops, unsigned nsops);
对信号灯集进行P/V操作，semid为创建的信号灯集标识符，sops为对信号灯集进行操作的结构体，sem_num为要操作的信号灯的编号(0序)，sem_op为对信号灯的操作(1 V操作，-1 P操作)，sem_flg为操作标识位，包括IPC_NOWAIT,SEM_UNDO, nsops为要操作的信号灯的个数
struct sembuf{
	unsigned short sem_num;  /* semaphore number */
	short          sem_op;   /* semaphore operation */
	short          sem_flg;  /* operation flags */
}












TCP/IP协议包括4层，从底到上依次为：网络接口和物理层，网络层，传输层，应用层。
TCP协议特点：面向连接，传输可靠（数据无误，数据无丢失，数据无失序，数据无重复到达），适用于要求传输质量高以及大量数据传输的场景
UDP协议特点：无连接，不可靠
socket是一个编程接口，其使用并不局限于TCP/IP协议

int inet_aton(const char *cp, struct in_addr *inp);
将cp所指的字符串转换为32位的网络字节序二进制值

in_addr_t inet_addr(const char *cp);
将cp所指的字符串转换为32位的网络字节序二进制值，并返回转换后的地址

char *inet_ntoa(struct in_addr in);
将32为网络字节序二进制值转换为主机字节序的字符串表示的地址

uint32_t htonl(uint32_t hostlong);
uint16_t htons(uint16_t hostshort);
uint32_t ntohl(uint32_t netlong);
uint16_t ntohs(uint16_t netshort);
主机字节序与网络字节序的转换

int socket(int domain, int type, int protocol);
创建一个套接字，domain指定通讯的协议族，可选AF_INET，AF_UNIX等选项，type指定套接字的类型，可选SOCK_STREAM，SOCK_DGRAM，SOCK_RAW等，protocol通常指定为0，成功返回一个文件描述符指向新建的socket，失败返回-1

int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
将创建的socket与指定地址和端口号绑定起来，sockfd为创建的套接字标识符，addr为需要绑定的地址及端口号信息，addrlen为绑定信息的长度，成功返回0，失败返回-1

通用地址结构，唯一作用是类型转换
struct sockaddr {
	sa_family_t sa_family;
	char        sa_data[14];
};

Internet协议地址结构
struct sockaddr_in {
	sa_family_t    sin_family; /* address family: AF_INET */
	in_port_t      sin_port;   /* port in network byte order */
	struct in_addr sin_addr;   /* internet address */
};

/* Internet address. */
struct in_addr {
	uint32_t       s_addr;     /* address in network byte order */
};

UNIX协议地址结构
truct sockaddr_un {
	sa_family_t sun_family;               /* AF_UNIX */
	char        sun_path[UNIX_PATH_MAX];  /* pathname */
};

int listen(int sockfd, int backlog);
监听套接字，sockfd为要监听的套接字ID，backlog指定了正在等待连接的最大队列长度，成功返回0，失败返回-1，完成listen()调用滞后，socket变成了监听socket

int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
服务器端接受等待队列连接队列中的第一个连接请求，sockfd为监听套接字，addr为出参，保存请求方的地址信息，addrlen为出参，保存请求方的地址长度，成功返回以建立好连接的套接字标识符，失败返回-1

int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
客户端发起连接请求，sockfd为发起连接请求的套接字标识符，addr为服务器端的地址信息，addrlen为服务器端地址长度，成功返回0，失败返回-1

ssize_t send(int sockfd, const void *buf, size_t len, int flags);
通过已建立连接的套接字接发送数据，通常用在TCP协议中， sockfd为发起连接的套接字或已建立连接的套接字，buf为发送缓冲区首地址，len为发送的字节数，flag为发送方式(通常为0)，成功返回实际发送的字节数，失败返回-1

ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,
		const struct sockaddr *dest_addr, socklen_t addrlen);
无连接的情况下发送数据，通常在UDP协议中使用，dest_addr指定目标端的地址信息，addrlen指定接收端地址信息长度，其他各参数使用如上，成功返回实际发送的字节数，失败返回-1

ssize_t recv(int sockfd, void *buf, size_t len, int flags);
通过已建立连接的套接字接收数据，socked为已建立连接的套接字标识符，buf为接受信息的缓冲区，len为缓冲区的最大长度，flag为0，成功返回实际接收到的字节数，失败返回-1

ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,
		struct sockaddr *src_addr, socklen_t *addrlen);
无连接的情况下接收数据，src_addr为源端地址信息，addelen为源端地址长度，其他参数意义如上，成功返回实际接收到的字节数，失败返回-1

int close(int fd);
关闭套接字，在TCP协议中，由于通讯是基于连接的，所以会关闭双向通讯，fd为要关闭的套接字，成功返回0，失败返回-1

int shutdown(int sockfd, int how);
关闭指定的套接字通道，sockfd为要关闭的套接字，how指定关闭方式，SHUT_RD关闭读通道，SHUT_WR关闭写通道，SHUT_RDWR关闭读写双向通道

int fcntl(int fd, int cmd, ... /* arg */ );
操控文件描述符，fd为要操作的文件描述符，cmd为将要使用的命令，F_GETFL获得文件描述符的状态标志位，arg参数指定为0，成功返回状态标志。F_SETFL设置文件描述符的状态标识，需指定arg参数.可用来设置设置一个套接字的属性为O_NONBLOCK来实现非阻塞

int select(int nfds, fd_set *readfds, fd_set *writefds,
		fd_set *exceptfds, struct timeval *timeout);
实现服务器的多路复用，监控多个文件描述符，直到至少有一个文件描述符ready，nfds为监控的最大的文件描述符值+1的结果，readfds为需要监控的读文件描述符集，writefds为需要监控的写文件描述符集，exceptfds为需要监控的异常文件描述符集，timeout为监控超时选项，NULL监控时一直阻塞，timeout=0时立即返回不阻塞，不为0时在指定时间内将阻塞检查是否有文件标识符ready。成功时返回ready的文件描述符的总数，超时返回0，失败返回-1

void FD_ZERO(fd_set *fdset);清空fdset中的所有文件描述符
void FD_SET(int fd, fd_set *fdset);将文件描述符fd添加到fdset集中
void FD_CLR(int fd, fd_set *fdset);将文件描述符fd从fdset集中删除
int FD_ISSET(int fd, fd_set *fdset);检测fd是否在fdset集中，在fdset集中返回1，不在返回0




int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen);
获得套接字的属性，sockfd为指定的套接字，level指定控制套接字的层次，有三个选项
SOL_SOCKET:通用套接字选项，
IPPROTO_IP:IP选项
IPPROTO_TCP:TCP选项
optname指定控制的选项名称，如通用套接字选项中的SO_RCVTIMEO设置接收超时，SO_BROADCAST设置广播发送，IP选项中的IP_ADD_MEMBERSHIP加入多播组
optval:接收选项值的缓冲区
optlen:选项值缓冲区的长度
成功返回0，失败返回-1

int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
设置套接字的属性，sockfd为指定的套接字，level指定控制套接字的层次，有三个选项
SOL_SOCKET:通用套接字选项，
IPPROTO_IP:IP选项
IPPROTO_TCP:TCP选项
optname指定控制的选项名称，如通用套接字选项中的SO_RCVTIMEO设置接收超时，SO_BROADCAST设置广播发送，IP选项中的IP_ADD_MEMBERSHIP加入多播组
optval:设置选项值的缓冲区
optlen:选项值缓冲区的长度
成功返回0，失败返回-1

广播发送：setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &on, sizeof(on));
多播发送：setsockopt(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq));



